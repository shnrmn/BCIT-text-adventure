[33mcommit 58504e3ac5d37004854c6e54bb2d4455e6410a47[m
Author: Shawn Norman <shawnnorman@gmail.com>
Date:   Tue Nov 19 19:09:56 2013 -0800

    Initial commit

[1mdiff --git a/.classpath b/.classpath[m
[1mnew file mode 100644[m
[1mindex 0000000..822b577[m
[1m--- /dev/null[m
[1m+++ b/.classpath[m
[36m@@ -0,0 +1,6 @@[m
[32m+[m[32m<?xml version="1.0" encoding="UTF-8"?>[m
[32m+[m[32m<classpath>[m
[32m+[m	[32m<classpathentry kind="src" path=""/>[m
[32m+[m	[32m<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7"/>[m
[32m+[m	[32m<classpathentry kind="output" path=""/>[m
[32m+[m[32m</classpath>[m
[1mdiff --git a/.project b/.project[m
[1mnew file mode 100644[m
[1mindex 0000000..958132b[m
[1m--- /dev/null[m
[1m+++ b/.project[m
[36m@@ -0,0 +1,17 @@[m
[32m+[m[32m<?xml version="1.0" encoding="UTF-8"?>[m
[32m+[m[32m<projectDescription>[m
[32m+[m	[32m<name>NormanShawnAssign2</name>[m
[32m+[m	[32m<comment></comment>[m
[32m+[m	[32m<projects>[m
[32m+[m	[32m</projects>[m
[32m+[m	[32m<buildSpec>[m
[32m+[m		[32m<buildCommand>[m
[32m+[m			[32m<name>org.eclipse.jdt.core.javabuilder</name>[m
[32m+[m			[32m<arguments>[m
[32m+[m			[32m</arguments>[m
[32m+[m		[32m</buildCommand>[m
[32m+[m	[32m</buildSpec>[m
[32m+[m	[32m<natures>[m
[32m+[m		[32m<nature>org.eclipse.jdt.core.javanature</nature>[m
[32m+[m	[32m</natures>[m
[32m+[m[32m</projectDescription>[m
[1mdiff --git a/.settings/org.eclipse.jdt.core.prefs b/.settings/org.eclipse.jdt.core.prefs[m
[1mnew file mode 100644[m
[1mindex 0000000..7341ab1[m
[1m--- /dev/null[m
[1m+++ b/.settings/org.eclipse.jdt.core.prefs[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32meclipse.preferences.version=1[m
[32m+[m[32morg.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled[m
[32m+[m[32morg.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7[m
[32m+[m[32morg.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve[m
[32m+[m[32morg.eclipse.jdt.core.compiler.compliance=1.7[m
[32m+[m[32morg.eclipse.jdt.core.compiler.debug.lineNumber=generate[m
[32m+[m[32morg.eclipse.jdt.core.compiler.debug.localVariable=generate[m
[32m+[m[32morg.eclipse.jdt.core.compiler.debug.sourceFile=generate[m
[32m+[m[32morg.eclipse.jdt.core.compiler.problem.assertIdentifier=error[m
[32m+[m[32morg.eclipse.jdt.core.compiler.problem.enumIdentifier=error[m
[32m+[m[32morg.eclipse.jdt.core.compiler.source=1.7[m
[1mdiff --git a/Character.class b/Character.class[m
[1mnew file mode 100644[m
[1mindex 0000000..fcf0a6a[m
Binary files /dev/null and b/Character.class differ
[1mdiff --git a/Character.java b/Character.java[m
[1mnew file mode 100644[m
[1mindex 0000000..4cb1024[m
[1m--- /dev/null[m
[1m+++ b/Character.java[m
[36m@@ -0,0 +1,214 @@[m
[32m+[m[32mimport java.util.HashMap;[m
[32m+[m[32mimport java.util.Stack;[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * A character in the game.[m
[32m+[m[32m *[m[41m [m
[32m+[m[32m * @author Shawn Norman[m
[32m+[m[32m * @version 2013.02.19[m
[32m+[m[32m */[m
[32m+[m[32mpublic class Character[m
[32m+[m[32m{[m
[32m+[m[32m    private String description;[m
[32m+[m[32m    private double maxWeight;[m
[32m+[m[32m    private double currentWeight;[m
[32m+[m[32m    private Room currentRoom;[m
[32m+[m[32m    protected Inventory items;[m
[32m+[m[32m    private Stack<Room> route;[m
[32m+[m[32m    public static final double STARTING_WEIGHT = 0.0;[m
[32m+[m[32m    public static final int FIRST_CHARACTER = 0;[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Constructor for objects of class Character[m
[32m+[m[32m     * @param description the description[m
[32m+[m[32m     * @param maxWeight the max weight they can carry in kilos[m
[32m+[m[32m     * @param startingRoom the starting room[m
[32m+[m[32m     */[m
[32m+[m[32m    public Character(String description, double maxWeight)[m
[32m+[m[32m    {[m
[32m+[m[32m        this.description = description;[m
[32m+[m[32m        this.maxWeight = maxWeight;[m
[32m+[m[32m        currentWeight = STARTING_WEIGHT;[m
[32m+[m[32m        route = new Stack<Room>();[m
[32m+[m[32m        items = new Inventory();[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * @param description the new description[m
[32m+[m[32m     */[m
[32m+[m[32m    public void setDescription(String description)[m
[32m+[m[32m    {[m
[32m+[m[32m        this.description = description;[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    // Handling items.[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Adds an item to the inventory.[m
[32m+[m[32m     * @param item the item to add[m
[32m+[m[32m     * @param name the name[m
[32m+[m[32m     */[m
[32m+[m[32m    public String takeItem(Item item)[m
[32m+[m[32m    {[m
[32m+[m[32m        if(item == null || !item.getCanPickUp()) {[m
[32m+[m[32m            return "Can't take that item.";[m
[32m+[m[32m        }[m
[32m+[m[32m        else if(item.getName().equals("dummy")) {[m
[32m+[m[32m            return "Take what?";[m
[32m+[m[32m        }[m
[32m+[m[32m        else if((currentWeight + item.getWeightKg()) <= maxWeight) { // check the carrying capacity[m
[32m+[m[32m            currentRoom.removeItem(item.getName());[m
[32m+[m[32m            items.addItem(item.getName(), item);[m
[32m+[m[32m            currentWeight += item.getWeightKg();[m
[32m+[m[32m            return "You take the " + item.getName() + ".";[m
[32m+[m[32m        }[m
[32m+[m[32m        else {[m
[32m+[m[32m            return "Carrying too much weight for that!";[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    /**[m[41m [m
[32m+[m[32m     * Gives an item to another character. Each room currently has only one character.[m[41m [m
[32m+[m[32m     * If more characters are added we will have to find a better way to search for characters.[m[41m [m
[32m+[m[32m     *[m[41m [m
[32m+[m[32m     * @param item to give[m
[32m+[m[32m     */[m
[32m+[m[32m    public String giveItem(Item item)[m
[32m+[m[32m    {[m
[32m+[m[32m        if(item !=null && item.getName().equals("dummy")) {[m
[32m+[m[32m            return "Give what?";[m
[32m+[m[32m        }[m
[32m+[m[32m        else if(currentRoom.getCharacters().size() > 0) {[m
[32m+[m[32m            Character character = currentRoom.getCharacters().get(FIRST_CHARACTER);[m
[32m+[m[32m            if(item != null && character.wantsItem(item)) {[m
[32m+[m[32m                items.removeItem(item.getName());[m
[32m+[m[32m                currentWeight -= item.getWeightKg();[m
[32m+[m[32m                return "You give away the " + item.getName() + "\n" + character.takeItem(item);[m
[32m+[m[32m            }[m
[32m+[m[32m            else if(item != null && !character.wantsItem(item)) {[m
[32m+[m[32m                return "They don't seem to want that item.";[m
[32m+[m[32m            }[m
[32m+[m[32m            else {[m
[32m+[m[32m                return "You don't have that item.";[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m        else {[m
[32m+[m[32m            return "There is no one here.";[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    /**[m[41m [m
[32m+[m[32m     * Drops an item in the room.[m
[32m+[m[32m     * @param item to drop[m
[32m+[m[32m     */[m
[32m+[m[32m    public String dropItem(Item item)[m
[32m+[m[32m    {[m
[32m+[m[32m        if(item !=null && item.getName().equals("dummy")) {[m
[32m+[m[32m            return "Drop what?";[m
[32m+[m[32m        } else if (item !=null) {[m
[32m+[m[32m            currentRoom.putInRoom(item.getName(), item);[m
[32m+[m[32m            items.removeItem(item.getName());[m
[32m+[m[32m            currentWeight -= item.getWeightKg();[m
[32m+[m[32m            return "You drop the " + item.getName();[m
[32m+[m[32m        }[m
[32m+[m[32m        else {[m
[32m+[m[41m        [m	[32mreturn "You don't have that item.";[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    /**[m[41m [m
[32m+[m[32m     * @return an Item in the inventory[m
[32m+[m[32m     * @param name the name of the Item[m
[32m+[m[32m     */[m
[32m+[m[32m    public Item getItem(String name)[m
[32m+[m[32m    {[m
[32m+[m[32m        return items.getItem(name);[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    /** @return the inventory */[m
[32m+[m[32m    public HashMap<String, Item> getItems()[m
[32m+[m[32m    {[m
[32m+[m[32m        return items.getItems();[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    /** @return a String describing the items in the inventory */[m
[32m+[m[32m    public String getItemsString()[m
[32m+[m[32m    {[m
[32m+[m[32m        if(!items.getItems().isEmpty()) {[m
[32m+[m[32m            return "You are carrying: " + items;[m[41m [m
[32m+[m[32m        }[m
[32m+[m[32m        else {[m
[32m+[m[32m            return "You are carrying nothing.";[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    /**[m[41m [m
[32m+[m[32m     * @return a check if the character has an item[m
[32m+[m[32m     * @param name the item's name[m
[32m+[m[32m     */[m
[32m+[m[32m    public boolean hasItem(String name)[m
[32m+[m[32m    {[m
[32m+[m[32m        return items.hasItem(name);[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    /** @return whether the character wants an item or not, implemented in subclasses. */[m
[32m+[m[32m    public boolean wantsItem(Item item)[m
[32m+[m[32m    {[m
[32m+[m[32m        return true;[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    /** @return whether the character has a key or not */[m
[32m+[m[32m    public boolean hasKey()[m
[32m+[m[32m    {[m
[32m+[m[32m        return getItems().containsKey("key");[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    // Handling the character's location[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Sets the current room[m
[32m+[m[32m     * @param currentRoom the room to set[m
[32m+[m[32m     */[m
[32m+[m[32m    public void setCurrentRoom(Room currentRoom)[m
[32m+[m[32m    {[m
[32m+[m[32m        route.push(currentRoom);[m
[32m+[m[32m        this.currentRoom = currentRoom;[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    /** @return the current room */[m
[32m+[m[32m    public Room getCurrentRoom()[m
[32m+[m[32m    {[m
[32m+[m[32m        return currentRoom;[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    /**[m[41m [m
[32m+[m[32m     * Takes the player back to the previous room, allowing the[m
[32m+[m[32m     * player to retrace the route through the game[m[41m [m
[32m+[m[32m     */[m
[32m+[m[32m    public String goBack()[m
[32m+[m[32m    {[m
[32m+[m[32m        if(!route.empty()) {[m
[32m+[m[32m            currentRoom = route.pop();[m
[32m+[m[32m            return "You retrace your steps";[m
[32m+[m[32m        }[m
[32m+[m[32m        else {[m
[32m+[m[32m            return "You are already back where you started.";[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    /** @return a line of dialogue */[m
[32m+[m[32m    public String talk()[m
[32m+[m[32m    {[m
[32m+[m[32m        if(currentRoom.getCharacters().size() <= 0) {[m
[32m+[m[32m            return "You have no one to talk to.";[m
[32m+[m[32m        }[m
[32m+[m[32m        else {[m
[32m+[m[32m            return currentRoom.getCharacters().get(FIRST_CHARACTER).talk();[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    /** @return a String describing the character */[m
[32m+[m[32m    public String toString()[m
[32m+[m[32m    {[m
[32m+[m[32m        return description;[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m}[m
[1mdiff --git a/Command.class b/Command.class[m
[1mnew file mode 100644[m
[1mindex 0000000..129d9e6[m
Binary files /dev/null and b/Command.class differ
[1mdiff --git a/Command.java b/Command.java[m
[1mnew file mode 100644[m
[1mindex 0000000..413c15e[m
[1m--- /dev/null[m
[1m+++ b/Command.java[m
[36m@@ -0,0 +1,73 @@[m
[32m+[m[32m/**[m
[32m+[m[32m * This class is part of the "World of Zuul" application.[m[41m [m
[32m+[m[32m * "World of Zuul" is a very simple, text based adventure game.[m[41m  [m
[32m+[m[32m *[m
[32m+[m[32m * This class holds information about a command that was issued by the user.[m
[32m+[m[32m * A command currently consists of two strings: a command word and a second[m
[32m+[m[32m * word (for example, if the command was "take map", then the two strings[m
[32m+[m[32m * obviously are "take" and "map").[m
[32m+[m[32m *[m[41m [m
[32m+[m[32m * The way this is used is: Commands are already checked for being valid[m
[32m+[m[32m * command words. If the user entered an invalid command (a word that is not[m
[32m+[m[32m * known) then the command word is <null>.[m
[32m+[m[32m *[m
[32m+[m[32m * If the command had only one word, then the second word is <null>.[m
[32m+[m[32m *[m[41m [m
[32m+[m[32m * @author  Michael Kölling and David J. Barnes[m
[32m+[m[32m * @version 2011.07.31[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32mpublic class Command[m
[32m+[m[32m{[m
[32m+[m[32m    private String commandWord;[m
[32m+[m[32m    private String secondWord;[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Create a command object. First and second word must be supplied, but[m
[32m+[m[32m     * either one (or both) can be null.[m
[32m+[m[32m     * @param firstWord The first word of the command. Null if the command[m
[32m+[m[32m     *                  was not recognised.[m
[32m+[m[32m     * @param secondWord The second word of the command.[m
[32m+[m[32m     */[m
[32m+[m[32m    public Command(String firstWord, String secondWord)[m
[32m+[m[32m    {[m
[32m+[m[32m        commandWord = firstWord;[m
[32m+[m[32m        this.secondWord = secondWord;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Return the command word (the first word) of this command. If the[m
[32m+[m[32m     * command was not understood, the result is null.[m
[32m+[m[32m     * @return The command word.[m
[32m+[m[32m     */[m
[32m+[m[32m    public String getCommandWord()[m
[32m+[m[32m    {[m
[32m+[m[32m        return commandWord;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * @return The second word of this command. Returns null if there was no[m
[32m+[m[32m     * second word.[m
[32m+[m[32m     */[m
[32m+[m[32m    public String getSecondWord()[m
[32m+[m[32m    {[m
[32m+[m[32m        return secondWord;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * @return true if this command was not understood.[m
[32m+[m[32m     */[m
[32m+[m[32m    public boolean isUnknown()[m
[32m+[m[32m    {[m
[32m+[m[32m        return (commandWord == null);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * @return true if the command has a second word.[m
[32m+[m[32m     */[m
[32m+[m[32m    public boolean hasSecondWord()[m
[32m+[m[32m    {[m
[32m+[m[32m        return (secondWord != null);[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[1mdiff --git a/CommandWords.class b/CommandWords.class[m
[1mnew file mode 100644[m
[1mindex 0000000..e84a7ec[m
Binary files /dev/null and b/CommandWords.class differ
[1mdiff --git a/CommandWords.java b/CommandWords.java[m
[1mnew file mode 100644[m
[1mindex 0000000..fe1b6eb[m
[1m--- /dev/null[m
[1m+++ b/CommandWords.java[m
[36m@@ -0,0 +1,52 @@[m
[32m+[m[32m/**[m
[32m+[m[32m * This class is part of the "World of Zuul" application.[m[41m [m
[32m+[m[32m * "World of Zuul" is a very simple, text based adventure game.[m[41m  [m
[32m+[m[32m *[m[41m [m
[32m+[m[32m * This class holds an enumeration of all command words known to the game.[m
[32m+[m[32m * It is used to recognise commands as they are typed in.[m
[32m+[m[32m *[m
[32m+[m[32m * @author  Michael Kölling and David J. Barnes, modified by Shawn Norman[m
[32m+[m[32m * @version 2013.02.26[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32mpublic class CommandWords[m
[32m+[m[32m{[m
[32m+[m[32m    // a constant array that holds all valid command words[m
[32m+[m[32m    private static final String[] validCommands = {[m
[32m+[m[32m        "go", "quit", "back", "look", "talk", "take", "drop", "give", "items", "help"[m
[32m+[m[32m    };[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Constructor - initialise the command words.[m
[32m+[m[32m     */[m
[32m+[m[32m    public CommandWords()[m
[32m+[m[32m    {[m
[32m+[m[32m        // nothing to do at the moment...[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Check whether a given String is a valid command word.[m[41m [m
[32m+[m[32m     * @return true if a given string is a valid command,[m
[32m+[m[32m     * false if it isn't.[m
[32m+[m[32m     */[m
[32m+[m[32m    public boolean isCommand(String aString)[m
[32m+[m[32m    {[m
[32m+[m[32m        for(int i = 0; i < validCommands.length; i++) {[m
[32m+[m[32m            if(validCommands[i].equals(aString))[m
[32m+[m[32m                return true;[m
[32m+[m[32m        }[m
[32m+[m[32m        // if we get here, the string was not found in the commands[m
[32m+[m[32m        return false;[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    /**[m
[32m+[m[32m     * Print all valid commands to System.out.[m
[32m+[m[32m     */[m
[32m+[m[32m    public void showAll()[m[41m [m
[32m+[m[32m    {[m
[32m+[m[32m        for(String command: validCommands) {[m
[32m+[m[32m            System.out.print(command + "  ");[m
[32m+[m[32m        }[m
[32m+[m[32m        System.out.println();[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/Game.class b/Game.class[m
[1mnew file mode 100644[m
[1mindex 0000000..b0c5ee0[m
Binary files /dev/null and b/Game.class differ
[1mdiff --git a/Game.java b/Game.java[m
[1mnew file mode 100644[m
[1mindex 0000000..112c457[m
[1m--- /dev/null[m
[1m+++ b/Game.java[m
[36m@@ -0,0 +1,283 @@[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m *  A simple game where our hero is on a quest to find an item that will save his village.[m[41m [m
[32m+[m[32m *  This is the main class and implements all of the others - rooms, items and characters -[m[41m [m
[32m+[m[32m *  that the player can interact with in the game.[m
[32m+[m[32m *[m[41m [m
[32m+[m[32m * @author  Michael Kölling and David J. Barnes, modified by Shawn Norman[m
[32m+[m[32m * @version 2013.02.26[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32mpublic class Game[m[41m [m
[32m+[m[32m{[m
[32m+[m[32m    private Parser parser;[m
[32m+[m[32m    private Character player;[m
[32m+[m[32m    public static final double NPC_MAX_WEIGHT = 100.0;[m
[32m+[m[32m    public static final double PLAYER_MAX_WEIGHT = 20.0;[m
[32m+[m[41m        [m
[32m+[m[32m    /**[m
[32m+[m[32m     * Create the game and initialize its internal map.[m
[32m+[m[32m     */[m
[32m+[m[32m    public Game()[m[41m [m
[32m+[m[32m    {[m
[32m+[m[32m        player = new Character("You", PLAYER_MAX_WEIGHT);[m[41m [m
[32m+[m[32m        createRooms();[m
[32m+[m[32m        parser = new Parser();[m
[32m+[m[32m        play();[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    public static void main(String[] args)[m
[32m+[m[32m    {[m
[32m+[m[41m    [m	[32mnew Game();[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Create all the rooms and link their exits together.[m
[32m+[m[32m     */[m
[32m+[m[32m    private void createRooms()[m
[32m+[m[32m    {[m
[32m+[m[32m        Room courtyard, diningRoom, corridor, library, dungeon, tower, lockedRoom;[m
[32m+[m[41m      [m
[32m+[m[32m        // create the rooms[m
[32m+[m[32m        courtyard = new Room("in a large courtyard");[m
[32m+[m[32m        corridor = new Room("in a long, dimly lit corridor. Bats flutter about here and there, letting out shrill squeaks");[m
[32m+[m[32m        diningRoom = new Room("in a grand dining room. There is a long table, set for dinner");[m
[32m+[m[32m        library = new Room("in a dusty old library. The shelves are lined with hundreds of old books");[m
[32m+[m[32m        dungeon = new Room("in a dungeon with huge spiders crawling along the walls and ceiling. You are likely to be eaten");[m
[32m+[m[32m        tower = new Room("in a tower overlooking the castle and the lush lands around it");[m
[32m+[m[32m        lockedRoom = new LockedRoom("in a room that seems much larger than you thought. The walls shimmer with unnatural light");[m
[32m+[m[41m        [m
[32m+[m[32m        // initialise room exits[m
[32m+[m[32m        courtyard.setExit("north", corridor);[m
[32m+[m[32m        courtyard.setExit("west", diningRoom);[m
[32m+[m[32m        courtyard.setExit("up", tower);[m
[32m+[m[41m        [m
[32m+[m[32m        corridor.setExit("east", lockedRoom);[m
[32m+[m[32m        corridor.setExit("south", courtyard);[m
[32m+[m[41m        [m
[32m+[m[32m        diningRoom.setExit("east", courtyard);[m
[32m+[m[32m        diningRoom.setExit("up", library);[m
[32m+[m[32m        diningRoom.setExit("down", dungeon);[m
[32m+[m[41m        [m
[32m+[m[32m        library.setExit("down", diningRoom);[m
[32m+[m[41m        [m
[32m+[m[32m        dungeon.setExit("up", diningRoom);[m
[32m+[m[41m        [m
[32m+[m[32m        tower.setExit("down", courtyard);[m
[32m+[m[41m        [m
[32m+[m[32m        lockedRoom.setExit("north", corridor);[m
[32m+[m[41m        [m
[32m+[m[32m        // add items to the rooms[m
[32m+[m[32m        courtyard.putInRoom("spinning wheel", new Item("spinning wheel", 20.0, false));[m
[32m+[m[41m        [m
[32m+[m[32m        diningRoom.putInRoom("bottle of wine", new Item("bottle of wine", 1.0, true));[m
[32m+[m[32m        diningRoom.putInRoom("bottle of beer", new Item("bottle of beer", 0.5, true));[m
[32m+[m[32m        diningRoom.putInRoom("bottle of scotch", new Item("bottle of scotch", 1.0, true));[m
[32m+[m[32m        diningRoom.putInRoom("bottle of liqueur", new Item("bottle of liqueur", 1.0, true));[m
[32m+[m[32m        diningRoom.putInRoom("loaf of bread", new Item("loaf of bread", 0.5, true));[m
[32m+[m[41m        [m
[32m+[m[32m        library.putInRoom("huge dictionary", new Item("huge dictionary", 20.0, true));[m
[32m+[m[41m        [m
[32m+[m[32m        lockedRoom.putInRoom("sand ruby", new Item("sand ruby", 5.0, true));[m
[32m+[m[41m        [m
[32m+[m[32m        // add characters to the rooms[m
[32m+[m[32m        courtyard.addCharacter(new OldWoman("an old woman at the spinning wheel, singing to herself.", NPC_MAX_WEIGHT, player));[m
[32m+[m[32m        corridor.addCharacter(new OldMan("an old man sitting, quietly in a shaft of light.", NPC_MAX_WEIGHT, player));[m
[32m+[m[32m        tower.addCharacter(new Guard("a guard, looking out over the battlement. He shivers in the cold.", NPC_MAX_WEIGHT, player));[m
[32m+[m[32m        dungeon.addCharacter(new Spider("one spider, larger than all of the others, holding a key in its web.", NPC_MAX_WEIGHT, player));[m
[32m+[m[41m        [m
[32m+[m[32m        player.setCurrentRoom(courtyard);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     *  Main play routine. Loops until end of play.[m
[32m+[m[32m     */[m
[32m+[m[32m    public void play()[m[41m [m
[32m+[m[32m    {[m[41m            [m
[32m+[m[32m        printWelcome();[m
[32m+[m
[32m+[m[32m        // Enter the main command loop.  Here we repeatedly read commands and[m
[32m+[m[32m        // execute them until the game is over.[m
[32m+[m[41m                [m
[32m+[m[32m        boolean finished = false;[m
[32m+[m[32m        while (! finished) {[m
[32m+[m[32m            if(player.getItems().containsKey("sand ruby")) {[m
[32m+[m[32m                win();[m
[32m+[m[32m                finished = true;[m
[32m+[m[32m            }[m
[32m+[m[32m            else {[m
[32m+[m[32m                Command command = parser.getCommand();[m
[32m+[m[32m                finished = processCommand(command);[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m        System.out.println("Thank you for playing.  Good bye.");[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Print out the opening message for the player.[m
[32m+[m[32m     */[m
[32m+[m[32m    private void printWelcome()[m
[32m+[m[32m    {[m
[32m+[m[32m        System.out.println();[m
[32m+[m[32m        System.out.println("Greetings adverturer!");[m
[32m+[m[32m        System.out.println("You have little time and a very important task ahead of you.");[m
[32m+[m[32m        System.out.println("A deadly fever has gripped the people of your village. The only cure is the Sand Ruby.");[m
[32m+[m[32m        System.out.println("You have followed whispers and rumours to the castle before you. You open the giant doors and find yourself in a courtyard.");[m
[32m+[m[32m        System.out.println("Good luck!");[m
[32m+[m[32m        System.out.println("Type 'help' if you need help.");[m
[32m+[m[32m        System.out.println();[m
[32m+[m[32m        printLocationInfo();[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Given a command, process (that is: execute) the command.[m
[32m+[m[32m     * @param command The command to be processed.[m
[32m+[m[32m     * @return true If the command ends the game, false otherwise.[m
[32m+[m[32m     */[m
[32m+[m[32m    private boolean processCommand(Command command)[m[41m [m
[32m+[m[32m    {[m
[32m+[m[32m        boolean wantToQuit = false;[m
[32m+[m
[32m+[m[32m        if(command.isUnknown()) {[m
[32m+[m[32m            System.out.println("I don't know what you mean...");[m
[32m+[m[32m            return false;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        String commandWord = command.getCommandWord();[m
[32m+[m[32m        if (commandWord.equals("help")) {[m
[32m+[m[32m            printHelp();[m
[32m+[m[32m        }[m
[32m+[m[32m        else if (commandWord.equals("go")) {[m
[32m+[m[32m            goRoom(command);[m
[32m+[m[32m            printLocationInfo();[m
[32m+[m[32m        }[m
[32m+[m[32m        else if (commandWord.equals("quit")) {[m
[32m+[m[32m            wantToQuit = quit(command);[m
[32m+[m[32m        }[m
[32m+[m[32m        else if (commandWord.equals("back")) {[m
[32m+[m[32m            System.out.println(player.goBack());[m
[32m+[m[32m            printLocationInfo();[m
[32m+[m[32m        }[m
[32m+[m[32m        else if (commandWord.equals("look")) {[m
[32m+[m[32m            printLocationInfo();[m
[32m+[m[32m        }[m
[32m+[m[32m        else if (commandWord.equals("talk")) {[m
[32m+[m[32m            System.out.println(player.talk());[m
[32m+[m[32m        }[m
[32m+[m[32m        else if (commandWord.equals("take")) {[m
[32m+[m[32m            Item item = checkForItem(command, player.getCurrentRoom(), null); //makes sure the room has the item[m
[32m+[m[32m            System.out.println(player.takeItem(item));[m
[32m+[m[32m        }[m
[32m+[m[32m        else if (commandWord.equals("give")) {[m
[32m+[m[32m            Item item = checkForItem(command, null, player); //makes sure the player has the item[m
[32m+[m[32m            System.out.println(player.giveItem(item));[m
[32m+[m[32m        }[m
[32m+[m[32m        else if (commandWord.equals("drop")) {[m
[32m+[m[32m            Item item = checkForItem(command, null, player); //makes sure the player has the item[m
[32m+[m[32m            System.out.println(player.dropItem(item));[m
[32m+[m[32m        }[m
[32m+[m[32m        else if (commandWord.equals("items")) {[m
[32m+[m[32m            System.out.println(player.getItemsString());[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        return wantToQuit;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    // implementations of user commands:[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Print out some help information.[m
[32m+[m[32m     * Here we print some stupid, cryptic message and a list of the[m[41m [m
[32m+[m[32m     * command words.[m
[32m+[m[32m     */[m
[32m+[m[32m    private void printHelp()[m[41m [m
[32m+[m[32m    {[m
[32m+[m[32m        System.out.println("You are lost. You are worried about the fate of your village. You wander");[m
[32m+[m[32m        System.out.println("around the castle.");[m
[32m+[m[32m        System.out.println();[m
[32m+[m[32m        System.out.println("Your command words are:");[m
[32m+[m[32m        parser.showCommands();[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /**[m[41m [m
[32m+[m[32m     * "Quit" was entered. Check the rest of the command to see[m
[32m+[m[32m     * whether we really quit the game.[m
[32m+[m[32m     * @return true, if this command quits the game, false otherwise.[m
[32m+[m[32m     */[m
[32m+[m[32m    private boolean quit(Command command)[m[41m [m
[32m+[m[32m    {[m
[32m+[m[32m        if(command.hasSecondWord()) {[m
[32m+[m[32m            System.out.println("Quit what?");[m
[32m+[m[32m            return false;[m
[32m+[m[32m        }[m
[32m+[m[32m        else {[m
[32m+[m[32m            return true;  // signal that we want to quit[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    /** Display the current location info */[m
[32m+[m[32m    private void printLocationInfo()[m
[32m+[m[32m    {[m
[32m+[m[32m        System.out.println(player.getCurrentRoom().getLongDescription());[m
[32m+[m[32m        System.out.println(player.getItemsString());[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    /**[m[41m [m
[32m+[m[32m     * Try to go in one direction. If there is an exit, enter[m
[32m+[m[32m     * the new room, otherwise print an error message.[m
[32m+[m[32m     */[m
[32m+[m[32m    private void goRoom(Command command)[m[41m [m
[32m+[m[32m    {[m
[32m+[m[32m        if(!command.hasSecondWord()) {[m
[32m+[m[32m            // if there is no second word, we don't know where to go...[m
[32m+[m[32m            System.out.println("Go where?");[m
[32m+[m[32m            return;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        String direction = command.getSecondWord();[m
[32m+[m
[32m+[m[32m        // Try to leave current room.[m
[32m+[m[32m        Room nextRoom = player.getCurrentRoom().getExit(direction);[m
[32m+[m[32m        if (nextRoom == null) {[m
[32m+[m[32m            System.out.println("There is no door!");[m
[32m+[m[32m        }[m
[32m+[m[32m        else if (nextRoom instanceof LockedRoom) {[m
[32m+[m[32m            if(player.hasKey()) {[m
[32m+[m[32m                System.out.println("You use the key to open the door.");[m
[32m+[m[32m                player.setCurrentRoom(nextRoom);[m
[32m+[m[32m            }[m
[32m+[m[32m            else {[m
[32m+[m[32m                System.out.println("The door is locked");[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m        else {[m
[32m+[m[32m            player.setCurrentRoom(nextRoom);[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    /** Checks for an item in an inventory */[m
[32m+[m[32m    private Item checkForItem(Command command, Room room, Character character)[m
[32m+[m[32m    {[m
[32m+[m[32m        if(command.hasSecondWord()) {[m
[32m+[m[32m            String name = command.getSecondWord();[m
[32m+[m[32m            if(room == null && character.hasItem(name)) {[m
[32m+[m[32m                return character.getItem(name);[m
[32m+[m[32m            }[m
[32m+[m[32m            else if(character == null && room.hasItem(name)) {[m
[32m+[m[32m                return room.getItem(name);[m
[32m+[m[32m            }[m
[32m+[m[32m            else {[m
[32m+[m[32m                return null;[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m        else {[m
[32m+[m[32m            return new Item("dummy", 0.0, true); // a dummy item if no second word is given[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    /** Wins the game. */[m
[32m+[m[32m    private void win()[m
[32m+[m[32m    {[m
[32m+[m[32m        System.out.println("Congratulations! You have recovered the Sand Ruby and saved your village!");[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/Guard.class b/Guard.class[m
[1mnew file mode 100644[m
[1mindex 0000000..ad775ae[m
Binary files /dev/null and b/Guard.class differ
[1mdiff --git a/Guard.java b/Guard.java[m
[1mnew file mode 100644[m
[1mindex 0000000..4043960[m
[1m--- /dev/null[m
[1m+++ b/Guard.java[m
[36m@@ -0,0 +1,35 @@[m
[32m+[m[32m/**[m
[32m+[m[32m * An guard who is cold.[m
[32m+[m[32m *[m[41m [m
[32m+[m[32m * @author Shawn Norman[m
[32m+[m[32m * @version 2013.02.26[m
[32m+[m[32m */[m
[32m+[m[32mpublic class Guard extends NPC[m
[32m+[m[32m{[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Constructor for objects of class Guard[m
[32m+[m[32m     */[m
[32m+[m[32m    public Guard(String description, double maxWeight, Character player)[m
[32m+[m[32m    {[m
[32m+[m[32m        super(description, maxWeight, player);[m
[32m+[m[32m        setDialogue("You ask the guard about the Sand Ruby. He thinks for a moment, 'There is something very valuble in the treasure room.'" + "\n" + "'That darn spider queen stole the key.'");[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public boolean wantsItem(Item item)[m
[32m+[m[32m    {[m
[32m+[m[32m        if(item.getName() == "warm tunic") {[m
[32m+[m[32m            return true;[m
[32m+[m[32m        }[m
[32m+[m[32m        else {[m
[32m+[m[32m            return false;[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    public String takeItem(Item item)[m
[32m+[m[32m    {[m
[32m+[m[32m        items.addItem(item.getName(), item);[m
[32m+[m[32m        setDialogue("'Fare well, traveller.'");[m
[32m+[m[32m        return "The guard is quite pleased, 'I wish I could give you something in return.'" + "\n" + "'I can tell you that the old man in the hall collects bugs.'" + "\n" + "'Maybe you can bribe the spider with one of them? The old man likes rusty nails.'";[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[1mdiff --git a/Inventory.class b/Inventory.class[m
[1mnew file mode 100644[m
[1mindex 0000000..f001c32[m
Binary files /dev/null and b/Inventory.class differ
[1mdiff --git a/Inventory.java b/Inventory.java[m
[1mnew file mode 100644[m
[1mindex 0000000..8abe196[m
[1m--- /dev/null[m
[1m+++ b/Inventory.java[m
[36m@@ -0,0 +1,82 @@[m
[32m+[m[32mimport java.util.HashMap;[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * A collection of items for rooms or characters. It stores the item and a string which is the item's[m[41m [m
[32m+[m[32m * description for ease of looking up an item.[m
[32m+[m[32m *[m[41m [m
[32m+[m[32m * @author Shawn Norman[m
[32m+[m[32m * @version 2013.02.20[m
[32m+[m[32m */[m
[32m+[m[32mpublic class Inventory[m
[32m+[m[32m{[m
[32m+[m[32m    private HashMap<String, Item> items;[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Constructor for objects of class Inventory[m
[32m+[m[32m     */[m
[32m+[m[32m    public Inventory()[m
[32m+[m[32m    {[m
[32m+[m[32m        items = new HashMap<String, Item>();[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * @return items[m
[32m+[m[32m     */[m
[32m+[m[32m    public HashMap<String, Item> getItems()[m
[32m+[m[32m    {[m
[32m+[m[32m        return items;[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    /**[m
[32m+[m[32m     * Add an item to the inventory[m
[32m+[m[32m     * @param name the name of the item (it's description)[m
[32m+[m[32m     * @param item the item to add[m
[32m+[m[32m     */[m
[32m+[m[32m    public void addItem(String name, Item item)[m
[32m+[m[32m    {[m
[32m+[m[32m        items.put(name, item);[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    /**[m
[32m+[m[32m     * Remove an item from the inventory[m
[32m+[m[32m     * @param name the name of the item to remove[m
[32m+[m[32m     */[m
[32m+[m[32m    public void removeItem(String name)[m
[32m+[m[32m    {[m
[32m+[m[32m        items.remove(name);[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    /**[m
[32m+[m[32m     * Checks to see if an item exists in the inventory[m
[32m+[m[32m     * @param name the name to look for[m
[32m+[m[32m     * @return true or false[m
[32m+[m[32m     */[m
[32m+[m[32m    public boolean hasItem(String name)[m
[32m+[m[32m    {[m
[32m+[m[32m        return items.containsKey(name);[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    /**[m[41m [m
[32m+[m[32m     * @return an item from the inventory[m[41m [m
[32m+[m[32m     * @param name the name of the item[m
[32m+[m[32m     */[m
[32m+[m[32m    public Item getItem(String name)[m
[32m+[m[32m    {[m
[32m+[m[32m        if(items.containsKey(name)) {[m
[32m+[m[32m            return items.get(name);[m
[32m+[m[32m        }[m
[32m+[m[32m        else {[m
[32m+[m[32m            return null;[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    /** @return a String listing the items in the Inventory */[m
[32m+[m[32m    public String toString()[m
[32m+[m[32m    {[m
[32m+[m[32m        String itemsString = "";[m
[32m+[m[32m        for(Item item : items.values()) {[m[41m [m
[32m+[m[32m            itemsString += (item + ", ");[m
[32m+[m[32m        }[m
[32m+[m[32m        return itemsString.substring(0, itemsString.length()-2);[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/Item.class b/Item.class[m
[1mnew file mode 100644[m
[1mindex 0000000..ba5acd2[m
Binary files /dev/null and b/Item.class differ
[1mdiff --git a/Item.java b/Item.java[m
[1mnew file mode 100644[m
[1mindex 0000000..de4603f[m
[1m--- /dev/null[m
[1m+++ b/Item.java[m
[36m@@ -0,0 +1,65 @@[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * An item that canbe added to an inventory.[m
[32m+[m[32m *[m[41m [m
[32m+[m[32m * @author Shawn Norman[m
[32m+[m[32m * @version 2013.02.26[m
[32m+[m[32m */[m
[32m+[m[32mpublic class Item[m
[32m+[m[32m{[m
[32m+[m[32m    protected String name;[m
[32m+[m[32m    private double weightKg;[m
[32m+[m[32m    private boolean canPickUp;[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Constructor for objects of class Item[m
[32m+[m[32m     * @param name the item's description[m
[32m+[m[32m     * @param weightKg the item's weight in kilos[m
[32m+[m[32m     * @param canPickUp can the item be picked up or not[m
[32m+[m[32m     */[m
[32m+[m[32m    public Item(String name, double weightKg, boolean canPickUp)[m
[32m+[m[32m    {[m
[32m+[m[32m        this.name = name;[m
[32m+[m[32m        setWeightKg(weightKg);[m
[32m+[m[32m        this.canPickUp = canPickUp;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Validates the value for weight and sets the weight of the item[m
[32m+[m[32m     * @param weightKg the weight in kilos[m
[32m+[m[32m     */[m
[32m+[m[32m    public void setWeightKg(double weightKg)[m
[32m+[m[32m    {[m
[32m+[m[32m        if(weightKg > 0.0) {[m
[32m+[m[32m            this.weightKg = weightKg;[m
[32m+[m[32m        }[m
[32m+[m[32m        else {[m
[32m+[m[32m            weightKg = 0.0;[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    /** @return the weight in kilos */[m
[32m+[m[32m    public double getWeightKg()[m
[32m+[m[32m    {[m
[32m+[m[32m        return weightKg;[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    /** @return the name */[m
[32m+[m[32m    public String getName()[m
[32m+[m[32m    {[m
[32m+[m[32m        return name;[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    /** @return canPickUp boolean */[m
[32m+[m[32m    public boolean getCanPickUp()[m
[32m+[m[32m    {[m
[32m+[m[32m        return canPickUp;[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    /** @return a String desribing the item */[m
[32m+[m[32m    public String toString()[m
[32m+[m[32m    {[m
[32m+[m[32m        return name;[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m}[m
[1mdiff --git a/LockedRoom.class b/LockedRoom.class[m
[1mnew file mode 100644[m
[1mindex 0000000..991f9b2[m
Binary files /dev/null and b/LockedRoom.class differ
[1mdiff --git a/LockedRoom.java b/LockedRoom.java[m
[1mnew file mode 100644[m
[1mindex 0000000..862af83[m
[1m--- /dev/null[m
[1m+++ b/LockedRoom.java[m
[36m@@ -0,0 +1,18 @@[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * A room that requires a key to enter.[m
[32m+[m[32m *[m[41m [m
[32m+[m[32m * @author Shawn Norman[m[41m [m
[32m+[m[32m * @version 2013.02.26[m
[32m+[m[32m */[m
[32m+[m[32mpublic class LockedRoom extends Room[m
[32m+[m[32m{[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Constructor for objects of class LockedRoom[m
[32m+[m[32m     */[m
[32m+[m[32m    public LockedRoom(String description)[m
[32m+[m[32m    {[m
[32m+[m[32m        super(description);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/NPC.class b/NPC.class[m
[1mnew file mode 100644[m
[1mindex 0000000..972701a[m
Binary files /dev/null and b/NPC.class differ
[1mdiff --git a/NPC.java b/NPC.java[m
[1mnew file mode 100644[m
[1mindex 0000000..2ad44fa[m
[1m--- /dev/null[m
[1m+++ b/NPC.java[m
[36m@@ -0,0 +1,38 @@[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * A character that is not the player.[m
[32m+[m[32m *[m[41m [m
[32m+[m[32m * @author Shawn Norman[m
[32m+[m[32m * @version 2013.02.26[m
[32m+[m[32m */[m
[32m+[m[32mpublic abstract class NPC extends Character[m
[32m+[m[32m{[m
[32m+[m[32m    protected String dialogue;[m
[32m+[m[32m    protected Character player;[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Constructor for objects of class NPC[m
[32m+[m[32m     */[m
[32m+[m[32m    public NPC(String description, double maxWeight, Character player)[m
[32m+[m[32m    {[m
[32m+[m[32m        super(description, maxWeight);[m
[32m+[m[32m        this.player = player;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public String talk()[m
[32m+[m[32m    {[m
[32m+[m[32m        return dialogue;[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    /**[m[41m [m
[32m+[m[32m     * Change the dialogue.[m
[32m+[m[32m     * @param dialogue the new dialogue[m
[32m+[m[32m     */[m
[32m+[m[32m    public void setDialogue(String dialogue)[m
[32m+[m[32m    {[m
[32m+[m[32m        this.dialogue = dialogue;[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    public abstract boolean wantsItem(Item item);[m
[32m+[m[41m    [m
[32m+[m[32m}[m
[1mdiff --git a/OldMan.class b/OldMan.class[m
[1mnew file mode 100644[m
[1mindex 0000000..290c5b2[m
Binary files /dev/null and b/OldMan.class differ
[1mdiff --git a/OldMan.java b/OldMan.java[m
[1mnew file mode 100644[m
[1mindex 0000000..243a2ca[m
[1m--- /dev/null[m
[1m+++ b/OldMan.java[m
[36m@@ -0,0 +1,46 @@[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * An old man who likes to drink.[m
[32m+[m[32m *[m[41m [m
[32m+[m[32m * @author Shawn Norman[m
[32m+[m[32m * @version 2013.02.26[m
[32m+[m[32m */[m
[32m+[m[32mpublic class OldMan extends NPC[m
[32m+[m[32m{[m
[32m+[m[32m    private Character player;[m
[32m+[m[32m    public static final int BOTH_ITEMS = 2;[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Constructor for objects of class OldMan[m
[32m+[m[32m     */[m
[32m+[m[32m    public OldMan(String description, double maxWeight, Character player)[m
[32m+[m[32m    {[m
[32m+[m[32m        super(description, maxWeight, player);[m
[32m+[m[32m        setDialogue("The old man just stares at you.");[m
[32m+[m[32m        this.player = player;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public boolean wantsItem(Item item)[m
[32m+[m[32m    {[m
[32m+[m[32m        if((item.getName() == "bottle of scotch") || (item.getName() == "bottle of liqueur")) {[m
[32m+[m[32m            return true;[m
[32m+[m[32m        }[m
[32m+[m[32m        else {[m
[32m+[m[32m            return false;[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    public String takeItem(Item item)[m
[32m+[m[32m    {[m
[32m+[m[32m        items.addItem(item.getName(), item);[m
[32m+[m[32m        if(getItems().size() == BOTH_ITEMS) {[m[41m [m
[32m+[m[32m            player.getItems().put("exotic fly", new Item("exotic fly", 0.2, true));[m
[32m+[m[32m            setDialogue("The old man is busy drinking.");[m
[32m+[m[32m            return "The old man is slurs as he thanks you, 'Perfect! Now I can drink in peash! Take thish weird fly I found'" + "\n" + "You receive an exotic fly.";[m
[32m+[m[32m        }[m
[32m+[m[32m        else {[m
[32m+[m[32m            return "The old man is happy, but not satisfied, 'That won't do on it'sh own!'";[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[41m   [m
[32m+[m[32m}[m
[1mdiff --git a/OldWoman.class b/OldWoman.class[m
[1mnew file mode 100644[m
[1mindex 0000000..ff2103c[m
Binary files /dev/null and b/OldWoman.class differ
[1mdiff --git a/OldWoman.java b/OldWoman.java[m
[1mnew file mode 100644[m
[1mindex 0000000..19fc3e3[m
[1m--- /dev/null[m
[1m+++ b/OldWoman.java[m
[36m@@ -0,0 +1,39 @@[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * An old woman who likes to sing.[m
[32m+[m[32m *[m[41m [m
[32m+[m[32m * @author Shawn Norman[m
[32m+[m[32m * @version 2013.02.26[m
[32m+[m[32m */[m
[32m+[m[32mpublic class OldWoman extends NPC[m
[32m+[m[32m{[m
[32m+[m[32m    private Character player;[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Constructor for objects of class OldWoman[m
[32m+[m[32m     */[m
[32m+[m[32m    public OldWoman(String description, double maxWeight, Character player)[m
[32m+[m[32m    {[m
[32m+[m[32m        super(description, maxWeight, player);[m
[32m+[m[32m        setDialogue("You attempt to get the old woman's attention, 'Excuse me, my lady, I come seeking a jewel known as the Sand Ruby. Have you heard of it?'" + "\n" + "She stops singing and looks up at you, 'I ain't heard of no Sand Ruby, I'm trying to finish a new song, but I can't find the right words.'");[m
[32m+[m[32m        this.player = player;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public boolean wantsItem(Item item)[m
[32m+[m[32m    {[m
[32m+[m[32m        if(item.getName() == "huge dictionary") {[m
[32m+[m[32m            return true;[m
[32m+[m[32m        }[m
[32m+[m[32m        else {[m
[32m+[m[32m            return false;[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    public String takeItem(Item item)[m
[32m+[m[32m    {[m
[32m+[m[32m        items.addItem(item.getName(), item);[m
[32m+[m[32m        player.getItems().put("warm tunic", new Item("warm tunic", 5.0, true));[m
[32m+[m[32m        setDialogue("The old woman looks up, 'Almost finished!'");[m
[32m+[m[32m        return "The old woman's eyes light up at the sight of the dictionary, 'Thank you so much! This will surely help me with my song.'" + "\n" + "'I don't have much to offer, but take this warm tunic I've been sewing. Good luck on your quest!'" + "\n" + "You receive a warm tunic.";[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/Parser.class b/Parser.class[m
[1mnew file mode 100644[m
[1mindex 0000000..ae31a3f[m
Binary files /dev/null and b/Parser.class differ
[1mdiff --git a/Parser.java b/Parser.java[m
[1mnew file mode 100644[m
[1mindex 0000000..a44f29b[m
[1m--- /dev/null[m
[1m+++ b/Parser.java[m
[36m@@ -0,0 +1,70 @@[m
[32m+[m[32mimport java.util.Scanner;[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * This class is part of the "World of Zuul" application.[m[41m [m
[32m+[m[32m * "World of Zuul" is a very simple, text based adventure game.[m[41m  [m
[32m+[m[32m *[m[41m [m
[32m+[m[32m * This parser reads user input and tries to interpret it as an "Adventure"[m
[32m+[m[32m * command. Every time it is called it reads a line from the terminal and[m
[32m+[m[32m * tries to interpret the line as a two word command. It returns the command[m
[32m+[m[32m * as an object of class Command.[m
[32m+[m[32m *[m
[32m+[m[32m * The parser has a set of known command words. It checks user input against[m
[32m+[m[32m * the known commands, and if the input is not one of the known commands, it[m
[32m+[m[32m * returns a command object that is marked as an unknown command.[m
[32m+[m[32m *[m[41m [m
[32m+[m[32m * @author  Michael Kölling and David J. Barnes, modified by Shawn Norman[m
[32m+[m[32m * @version 2013.02.26[m
[32m+[m[32m */[m
[32m+[m[32mpublic class Parser[m[41m [m
[32m+[m[32m{[m
[32m+[m[32m    private CommandWords commands;  // holds all valid command words[m
[32m+[m[32m    private Scanner reader;         // source of command input[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Create a parser to read from the terminal window.[m
[32m+[m[32m     */[m
[32m+[m[32m    public Parser()[m[41m [m
[32m+[m[32m    {[m
[32m+[m[32m        commands = new CommandWords();[m
[32m+[m[32m        reader = new Scanner(System.in);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * @return The next command from the user.[m
[32m+[m[32m     */[m
[32m+[m[32m    public Command getCommand()[m[41m [m
[32m+[m[32m    {[m
[32m+[m[32m        String inputLine;   // will hold the full input line[m
[32m+[m[32m        String word1 = null;[m
[32m+[m[32m        String word2 = null;[m
[32m+[m
[32m+[m[32m        System.out.print("> ");     // print prompt[m
[32m+[m
[32m+[m[32m        inputLine = reader.nextLine();[m
[32m+[m
[32m+[m[32m        // Find up to two words on the line.[m
[32m+[m[32m        String words[] = inputLine.split(" ", 2); // splits the string after the first space[m
[32m+[m[32m        word1 = words[0];[m
[32m+[m[32m        if(words.length > 1) {[m
[32m+[m[32m            word2 = words[1];[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        // Now check whether this word is known. If so, create a command[m
[32m+[m[32m        // with it. If not, create a "null" command (for unknown command).[m
[32m+[m[32m        if(commands.isCommand(word1)) {[m
[32m+[m[32m            return new Command(word1, word2);[m
[32m+[m[32m        }[m
[32m+[m[32m        else {[m
[32m+[m[32m            return new Command(null, word2);[m[41m [m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    /**[m
[32m+[m[32m     * Print out a list of valid command words.[m
[32m+[m[32m     */[m
[32m+[m[32m    public void showCommands()[m
[32m+[m[32m    {[m
[32m+[m[32m        commands.showAll();[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/README.TXT b/README.TXT[m
[1mnew file mode 100644[m
[1mindex 0000000..82b86b4[m
[1m--- /dev/null[m
[1m+++ b/README.TXT[m
[36m@@ -0,0 +1,27 @@[m
[32m+[m[32mProject: zuul-bad[m
[32m+[m[32mAuthors: Michael Kölling and David J. Barnes[m
[32m+[m
[32m+[m[32mThis project is part of the material for the book[m
[32m+[m
[32m+[m[32m   Objects First with Java - A Practical Introduction using BlueJ[m
[32m+[m[32m   Fifth edition[m
[32m+[m[32m   David J. Barnes and Michael Kölling[m
[32m+[m[32m   Pearson Education, 2012[m
[32m+[m
[32m+[m[32mThis project is a simple framework for an adventure game. In this version,[m
[32m+[m[32mit has a few rooms and the ability for a player to walk between these rooms.[m
[32m+[m[32mThat's all.[m
[32m+[m
[32m+[m[32mTo start this application, create an instance of class "Game" and call its[m
[32m+[m[32m"play" method.[m
[32m+[m
[32m+[m[32mThis version of the game contains some very bad class design. It should NOT[m
[32m+[m[32mbe used as a basis for extending the project without fixing these design[m
[32m+[m[32mproblems. It serves as an example to discuss good and bad design (chapter 7[m
[32m+[m[32mof the book).[m
[32m+[m
[32m+[m[32mChapter 7 of the book contains a detailed description of the problems in this[m
[32m+[m[32mproject, and how to fix them.[m
[32m+[m
[32m+[m[32mThe project 'zuul-better' contains a version of this project with better[m
[32m+[m[32mdesigned class structure. It includes the fixes discussed in the book.[m
[1mdiff --git a/Room.class b/Room.class[m
[1mnew file mode 100644[m
[1mindex 0000000..5e20e8f[m
Binary files /dev/null and b/Room.class differ
[1mdiff --git a/Room.java b/Room.java[m
[1mnew file mode 100644[m
[1mindex 0000000..dce0c8f[m
[1m--- /dev/null[m
[1m+++ b/Room.java[m
[36m@@ -0,0 +1,174 @@[m
[32m+[m[32mimport java.util.HashMap;[m
[32m+[m[32mimport java.util.Set;[m
[32m+[m[32mimport java.util.ArrayList;[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Class Room - a room in an adventure game.[m
[32m+[m[32m *[m
[32m+[m[32m * This class is part of the "World of Zuul" application.[m[41m [m
[32m+[m[32m * "World of Zuul" is a very simple, text based adventure game.[m[41m  [m
[32m+[m[32m *[m
[32m+[m[32m * A "Room" represents one location in the scenery of the game.  It is[m[41m [m
[32m+[m[32m * connected to other rooms via exits.  The exits are labelled north,[m[41m [m
[32m+[m[32m * east, south, west.  For each direction, the room stores a reference[m
[32m+[m[32m * to the neighboring room, or null if there is no exit in that direction.[m
[32m+[m[32m *[m[41m [m
[32m+[m[32m * @author  Michael Kölling and David J. Barnes, modified by Shawn Norman[m
[32m+[m[32m * @version 2013.02.16[m
[32m+[m[32m */[m
[32m+[m[32mpublic class Room[m[41m [m
[32m+[m[32m{[m
[32m+[m[32m    private String description;[m
[32m+[m[32m    private HashMap<String, Room> exits;[m
[32m+[m[32m    private Inventory items;[m
[32m+[m[32m    private ArrayList<Character> characters;[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Create a room described "description". Initially, it has[m
[32m+[m[32m     * no exits. "description" is something like "a kitchen" or[m
[32m+[m[32m     * "an open court yard".[m
[32m+[m[32m     * @param description The room's description.[m
[32m+[m[32m     */[m
[32m+[m[32m    public Room(String description)[m[41m [m
[32m+[m[32m    {[m
[32m+[m[32m        this.description = description;[m
[32m+[m[32m        exits = new HashMap<String, Room>();[m
[32m+[m[32m        items = new Inventory();[m
[32m+[m[32m        characters = new ArrayList<Character>();[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Define the exits of this room.  Every direction either leads[m
[32m+[m[32m     * to another room or is null (no exit there).[m
[32m+[m[32m     * @param direction The direction of the exit.[m
[32m+[m[32m     * @param neighbour The room in the given direction.[m
[32m+[m[32m     */[m
[32m+[m[32m    public void setExit(String direction, Room neighbour)[m[41m [m
[32m+[m[32m    {[m
[32m+[m[32m        exits.put(direction, neighbour);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * @return The description of the room.[m
[32m+[m[32m     */[m
[32m+[m[32m    public String getDescription()[m
[32m+[m[32m    {[m
[32m+[m[32m        return description;[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    /**[m
[32m+[m[32m     * Return a long description of the current room.[m
[32m+[m[32m     * @return a description of the room and it's exits[m
[32m+[m[32m     */[m
[32m+[m[32m    public String getLongDescription()[m
[32m+[m[32m    {[m
[32m+[m[32m        return "You are " + description + ".\n" + getExitString() + "\n" + getRoomItems() + "\n" + getCharactersString();[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    /**[m
[32m+[m[32m     * Get the exit in the chosen direction[m
[32m+[m[32m     * @param direction the direction to check[m
[32m+[m[32m     * @return the room in that direction[m
[32m+[m[32m     */[m
[32m+[m[32m    public Room getExit(String direction)[m
[32m+[m[32m    {[m
[32m+[m[32m        return exits.get(direction);[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    /**[m[41m [m
[32m+[m[32m     * Return a description of the room's exits[m
[32m+[m[32m     * @return A description of available exits[m
[32m+[m[32m     */[m
[32m+[m[32m    public String getExitString()[m
[32m+[m[32m    {[m
[32m+[m[32m        String exitString = "Exits:";[m
[32m+[m[32m        Set<String> keys = exits.keySet();[m
[32m+[m[32m        for(String exit : keys) {[m
[32m+[m[32m            exitString += " " + exit;[m
[32m+[m[32m        }[m
[32m+[m[32m        return exitString;[m
[32m+[m[32m    }[m[41m [m
[32m+[m[41m    [m
[32m+[m[32m    /**[m
[32m+[m[32m     * Add an item to the room[m
[32m+[m[32m     * @param item the item to add[m
[32m+[m[32m     */[m
[32m+[m[32m    public void putInRoom(String name, Item item)[m
[32m+[m[32m    {[m
[32m+[m[32m        items.addItem(name, item);[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    /**[m
[32m+[m[32m     * Remove an item from the room[m
[32m+[m[32m     * @param name the name of the item[m
[32m+[m[32m     */[m
[32m+[m[32m    public void removeItem(String name)[m
[32m+[m[32m    {[m
[32m+[m[32m        items.removeItem(name);[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    /**[m[41m [m
[32m+[m[32m     * @return an Item in the room[m
[32m+[m[32m     * @param name the name of the Item[m
[32m+[m[32m     */[m
[32m+[m[32m    public Item getItem(String name)[m
[32m+[m[32m    {[m
[32m+[m[32m        return items.getItem(name);[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    /**[m
[32m+[m[32m     * @return a check if the room has an item[m
[32m+[m[32m     * @param name the item's name[m
[32m+[m[32m     */[m
[32m+[m[32m    public boolean hasItem(String name)[m
[32m+[m[32m    {[m
[32m+[m[32m        return items.hasItem(name);[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    /** @return a String describing the items in the room */[m
[32m+[m[32m    public String getRoomItems()[m
[32m+[m[32m    {[m
[32m+[m[32m        if(!items.getItems().isEmpty()) {[m
[32m+[m[32m            return ("This room contains: " + items);[m[41m    [m
[32m+[m[32m        }[m
[32m+[m[32m        else {[m
[32m+[m[32m            return ("There are no items here.");[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    /**[m
[32m+[m[32m     * Add a character to the room[m
[32m+[m[32m     * @param character to add[m
[32m+[m[32m     */[m
[32m+[m[32m    public void addCharacter(Character character)[m
[32m+[m[32m    {[m
[32m+[m[32m        characters.add(character);[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    /** @return the items */[m
[32m+[m[32m    public HashMap<String, Item> getItems()[m
[32m+[m[32m    {[m
[32m+[m[32m        return items.getItems();[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    /** @return the characters ArrayList */[m
[32m+[m[32m    public ArrayList<Character> getCharacters()[m
[32m+[m[32m    {[m
[32m+[m[32m        return characters;[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    /** @return a String describing the characters in the room */[m
[32m+[m[32m    public String getCharactersString()[m
[32m+[m[32m    {[m
[32m+[m[32m        if(characters.size() > 0) {[m
[32m+[m[32m            String charactersString = "You see ";[m
[32m+[m[32m            for(Character character: characters) {[m
[32m+[m[32m                charactersString += character;[m
[32m+[m[32m            }[m
[32m+[m[32m            return charactersString;[m
[32m+[m[32m        }[m
[32m+[m[32m        else {[m
[32m+[m[32m            return "You are alone here.";[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/Spider.class b/Spider.class[m
[1mnew file mode 100644[m
[1mindex 0000000..92f9ae8[m
Binary files /dev/null and b/Spider.class differ
[1mdiff --git a/Spider.java b/Spider.java[m
[1mnew file mode 100644[m
[1mindex 0000000..608b3b4[m
[1m--- /dev/null[m
[1m+++ b/Spider.java[m
[36m@@ -0,0 +1,39 @@[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * A giant spider queen.[m
[32m+[m[32m *[m[41m [m
[32m+[m[32m * @author Shawn Norman[m
[32m+[m[32m * @version 2013.02.26[m
[32m+[m[32m */[m
[32m+[m[32mpublic class Spider extends NPC[m
[32m+[m[32m{[m
[32m+[m[32m    private Character player;[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Constructor for objects of class Spider[m
[32m+[m[32m     */[m
[32m+[m[32m    public Spider(String description, double maxWeight, Character player)[m
[32m+[m[32m    {[m
[32m+[m[32m        super(description, maxWeight, player);[m
[32m+[m[32m        setDialogue("The spider has nothing to say to you.");[m
[32m+[m[32m        this.player = player;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public boolean wantsItem(Item item)[m
[32m+[m[32m    {[m
[32m+[m[32m        if(item.getName() == "exotic fly") {[m
[32m+[m[32m            return true;[m
[32m+[m[32m        }[m
[32m+[m[32m        else {[m
[32m+[m[32m            return false;[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    public String takeItem(Item item)[m
[32m+[m[32m    {[m
[32m+[m[32m        items.addItem(item.getName(), item);[m
[32m+[m[32m        player.getItems().put("key", new Item("key", 0.1, true));[m
[32m+[m[32m        setDialogue("The spider seems sad.");[m
[32m+[m[32m        return "The spider grabs the fly with one of her many legs. She is so satisfied for a moment that she flings the key to you." + "\n" + "You receive a key.";[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/out/game.jar b/out/game.jar[m
[1mnew file mode 100644[m
[1mindex 0000000..8a9e0f3[m
Binary files /dev/null and b/out/game.jar differ
